<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">


<!-- <security:http auto-config="true" use-expressions="true"> -->
<security:http>
	
	<security:intercept-url pattern="/sample/all" access="permitAll" /> <!-- 로그인 없이 접근 가능 -->
	<security:intercept-url pattern="/main/**" access="permitAll" />
	<security:intercept-url pattern="/sample/member" access="hasAnyRole('ROLE_USER', 'ROLE_MEMBER')" />
	<security:intercept-url pattern="/sample/admin" access="hasRole('ROLE_ADMIN')" />
	
	<!-- <security:form-login login-page="/login" username-parameter="userId" password-parameter="passwd" login-processing-url="/loginProcess" default-target-url="/" always-use-default-target="true" authentication-success-handler-ref="authSuccHandler" /> -->
	
	<security:form-login login-page="/main/login" login-processing-url="/login" authentication-success-handler-ref="authSuccHandler" />
	
	<security:logout logout-url="/logout" logout-success-url="/main/login" invalidate-session="true" delete-cookies="JSESSIONID, remeber-me" />
	
	<security:remember-me data-source-ref="dataSource" token-validity-seconds="604800" />
	
	<!-- <security:session-management>
	
		<security:concurrency-control max-sessions="1" expired-url="/login/loginDuplicate" />
	
	</security:session-management> -->
	
	<!-- <security:access-denied-handler error-page="/accessError" /> -->
	
	<security:access-denied-handler ref="userAccessDenied" />
	
	<!-- <security:csrf disabled="true" /> -->
	
</security:http>

<!-- <bean id="passwordEncoder" class="org.Trip.security.UserNoOpPasswordEncoder" /> -->

<bean id="userAccessDenied" class="org.Trip.security.UserAccessDeniedHandler"></bean>


<bean id="bcryptPasswordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder" />

<bean id="authSuccHandler" class="org.Trip.security.UserAuthenticationSuccessHandler">
	<!-- <constructor-arg name="UserService" value="UserService" /> -->
</bean>

<!-- <bean id="customUserDetailsService" class="org.Trip.security.CustomUserDetailService"></bean> -->

<!-- <bean id="authFailHandler" class="org.Trip.security.UserAuthenticationFailHandler">
	<constructor-arg name="defaultFailureUrl" value="/login?error=auth" />
</bean> -->



<bean id="authProvider" class="org.Trip.security.UserAuthenticationProvider">
	<!-- <constructor-arg name="UserService" value="UserService" /> -->
</bean>

<bean id="UserService" class="org.Trip.security.UserAuthenticationService">
	<!-- <constructor-arg name="UserMapper" value="UserMapper" /> -->
</bean>


<security:authentication-manager alias="authManager">

	<!-- <security:authentication-provider> -->
	<!-- <security:authentication-provider user-service-ref="UserService"> -->
	<security:authentication-provider user-service-ref="customUserDetailsService">
		
		<!-- jdbc를 이용한 테이블 설정 p.642 -->
		<!-- <security:jdbc-user-service data-source-ref="dataSource" /> -->
		
		<!-- 인증과 권한을 확인하는데 필요한 쿼리 -->
		<!-- <security:jdbc-user-service data-source-ref="dataSource" users-by-username-query="select user_id, user_pw, enabled from userMember where user_id = ?" authorities-by-username-query="select user_id, auth from userAuth where user_id = ?" /> -->
		
	<!-- 	<security:jdbc-user-service data-source-ref="dataSource" users-by-username-query="select user_id, user_pw, enabled from userTable where user_id = ?" authorities-by-username-query="select user_id, auth from user_auth where user_id = ?" /> -->
		
		<!-- 비밀번호 암호화 -->
		<security:password-encoder ref="bcryptPasswordEncoder" />
		
		<!-- <security:password-encoder ref="passwordEncoder" /> -->
		
	</security:authentication-provider>
	
	
	
	<!-- <security:authentication-provider ref="authProvider" />
	
	<security:authentication-provider user-service-ref="UserService">
		
		<security:password-encoder ref="bcryptPasswordEncoder" />
	
	</security:authentication-provider> -->
	
</security:authentication-manager>







<!-- 예제 코드 -->

<!-- <security:http> -->

<!-- access는 권한을 의미힌다 -->
	<!-- <security:intercept-url pattern="/user/all" access="permitAll" /> -->
	
	<!-- 해당 URI는 ROLE_MEMBER라는 권한이 있는 사용자만 접근  해당 access는 표현식과 권한명을 의미하는 문자열을 이용할 수 있다.-->
	<!-- <security:intercept-url pattern="/user/member" access="hasRole('ROLE_MEMBER')" /> -->

	<!-- <security:form-login /> -->
	
	<!-- 반드시 get 방식 -->
	<!-- <security:form-login login-page="/login" /> -->
	
<!-- </security:http>

<security:authentication-manager>

	<security:authentication-provider>
	
		<security:user-service> -->
		
			<!-- <security:user name="member" password="1234" authorities="ROLE_MEMBER" /> -->
			
			<!-- <security:user name="member" password="{noop}1234" authorities="ROLE_MEMBER" />
			
		</security:user-service>
		
	</security:authentication-provider>

</security:authentication-manager> -->




</beans>
